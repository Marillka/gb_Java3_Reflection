При устройстве на работу спрашивайте как часто катаются релизы. Чем чаще, тем проще и интереснее.

Как работет под капотом Junit и что такое Reflection Api?
Что такое Reflection - переводится как отражение.

Junit написан через рефлексию. Это фрейворк который позволяет тестировать класс.

Рефлексия используется спрингом. В спринге есть такой термин -> аспектно-ориентированное программирование. Условно у вас есть приложение которое работает, и вы хотите все методы, подходящие под определенные критерии обернуть какой то логикой. Не в коде, а написать какой то код, который будет находить новые методы (пришел стажер, и написал метод connectDatabase()) и ваш метод уго увидел и начал тоже делать над ним какую то обертку (логирование, оптимизацию, проверку безопасности...). И вот эта штука работает на рефлексии. Работа аннотаций основанна на рефлексии.

А как она работет?
Ну рефлексия все знает об объекте. Да знает.
А за счет чего она знает? За счет того что храниться мета информация.
А как мы можем ее достать, а как мы можем понять что у нас в классе есть такой метод.

Как запускаются тесты в Junit?
Мы берем класс, который хотим протестировать. Дальше ищем все методы и дальше начинаем итерироваться, типо если он помечен аннотацией @Test то мы должны вызвать у него метод invoke(). Если нет аннотации @Test то мы его пропускаем.

Аннотация - способ разметить свой код.

Домашка:
Должны построить свой Junit в котором есть определенные правила:
Приоритезация от 1 до 10.
Дефолтный приоритет должен быть 5. Потому что по умолчанию приоритет средный. 1 неправильно, потому что нельзя будет сделать приоритет с более низким приоритетом.

Для того чтобы вызвать метод invoke() нужен сам объект. То есть нужно создать объект. Нужно вызвать конструктор newInstance() и только потом вызывать invoke().

На статические методы не надо вешать аннотацию @Test!!!!!!!!!!!!!!